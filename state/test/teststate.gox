// Copyright 2017 Factom Foundation
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

package test

import (
	"bytes"
	"fmt"
	"github.com/FactomProject/factomd/common/constants"
	"github.com/FactomProject/factomd/common/interfaces"
	"github.com/FactomProject/factomd/common/primitives"
	"github.com/FactomProject/factomd/state"
	"math/rand"
	"strings"
	"time"
)

var _ = fmt.Printf
var _ = strings.Replace

type Stats struct {
	badAddresses int
	transactions int
	errors       map[string]int
	full         map[string]string
	start        time.Time
	blocktimes   []time.Time
}

func (s Stats) begin() {
	s.start = time.Now()
}
func (s Stats) endBlock() {
	s.blocktimes = append(s.blocktimes, time.Now())
}
func (s Stats) logError(err string) {
	if s.errors == nil {
		s.errors = make(map[string]int)
	}
	cnt := s.errors[err]
	s.errors[err] = cnt + 1
}

type Test_state struct {
	state.FactoidState
	clock             int64
	twallet           interfaces.ISCWallet
	inputAddresses    []interfaces.IAddress // Genesis Address funds 10 addresses
	outputAddresses   []interfaces.IAddress // We consider our inputs and ten more addresses
	ecoutputAddresses []interfaces.IAddress // Entry Credit Addresses
	stats             Stats
}

func (fs *Test_state) GetWallet() interfaces.ISCWallet {
	return fs.twallet
}

func (fs *Test_state) GetTime64() int64 {
	return time.Now().UnixNano()
}

func (fs *Test_state) GetTime32() int64 {
	return time.Now().Unix()
}

func (fs *Test_state) newTransaction(maxIn, maxOut int) interfaces.ITransaction {
	var max, max2 uint64
	fs.inputAddresses = make([]interfaces.IAddress, 0, 20)
	for _, output := range fs.outputAddresses {
		bal := fs.GetBalance(output)
		if bal > 100000 {
			fs.inputAddresses = append(fs.inputAddresses, output)
		}
		if max < bal {
			max2 = max
			max = bal
		} else {
			if max2 < bal {
				max2 = bal
			}
		}
	}

	// The following code is a function that creates an array
	// of addresses pulled from some source array of addresses
	// selected randomly.
	var makeList = func(source []interfaces.IAddress, cnt int) []interfaces.IAddress {
		adrs := make([]interfaces.IAddress, 0, cnt)
		for len(adrs) < cnt {
			i := rand.Int() % len(source)
			adr := source[i]
			adrs = append(adrs, adr)
		}
		return adrs
	}

	mIn := maxIn
	mOut := maxOut

	joker := rand.Int() % 100
	if joker < 1 {
		mIn = maxIn * 100
	}
	joker = rand.Int() % 100
	if joker < 1 {
		mOut = maxOut * 200
	}

	// Get one to five inputs, and one to five outputs
	numInputs := rand.Int()%mIn + 1
	numOutputs := rand.Int() % mOut
	mumECOutputs := rand.Int() % mOut

	numInputs = (numInputs % (len(fs.inputAddresses) - 2)) + 1

	// fmt.Println("inputs outputs",numInputs,numOutputs, "limits",len(fs.inputAddresses),len(fs.outputAddresses))

	// Get my input and output addresses
	inputs := makeList(fs.inputAddresses, numInputs)
	outputs := makeList(fs.outputAddresses, numOutputs)
	ecoutputs := makeList(fs.ecoutputAddresses, mumECOutputs)
	var paid uint64
	t := fs.twallet.CreateTransaction(fs.GetTimeMilli())
	for _, adr := range inputs {
		balance := fs.GetBalance(adr)
		toPay := uint64(rand.Int63()) % (balance)
		paid = toPay + paid
		fs.twallet.AddInput(t, adr, toPay)
		//fmt.Print("\033[10;3H")
		//fmt.Printf("%s %s    \n",adr.String(),primitives.ConvertDecimal(toPay))
		//fmt.Print("\033[40;3H")
	}

	paid = paid - fs.GetFactoshisPerEC()*uint64(len(ecoutputs))

	for _, adr := range outputs {
		fs.twallet.AddOutput(t, adr, paid/uint64(len(outputs)))
	}

	for _, adr := range ecoutputs {
		fs.twallet.AddECOutput(t, adr, fs.GetFactoshisPerEC())
	}

	fee, _ := t.CalculateFee(fs.GetFactoshisPerEC())
	toPay := t.GetInputs()[0].GetAmount()
	fs.twallet.UpdateInput(t, 0, inputs[0], toPay+fee)

	valid, err1 := fs.twallet.SignInputs(t)
	if err1 != nil {
		Prtln("Failed to sign transaction")
	}
	if !valid {
		Prtln("Transaction is not valid")
	}
	if err := fs.Validate(len(fs.GetCurrentBlock().GetTransactions()), t); err != nil || err1 != nil {
		fs.GetDB().Put([]byte(DB_BAD_TRANS), t.GetHash().Bytes(), t)

		fs.stats.badAddresses += 1

		str := []byte(err.Error())[:10]
		if bytes.Compare(str, []byte("The inputs")) != 0 {
			str = []byte(err.Error())[:30]
		}
		fs.stats.errors[string(str)] += 1
		fs.stats.full[string(str)] = err.Error()

		return fs.newTransaction(maxIn, maxOut)
	}
	return t
}
